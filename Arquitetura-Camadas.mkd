# Arquitetura Camadas e Responsabilidades
significa que o c√≥digo est√° bem separado por responsabilidades. Isso facilita a manuten√ß√£o, testes e organiza√ß√£o do c√≥digo.

## T√≥picos
- **[Modelos](#model-modelos)**
- **[Context](#context-banco-de-dados)**
- **[Repository](#repository-acesso-ao-banco-de-dados)**
- **[Business](#business-regra-de-neg√≥cio)**
- **[Diferen√ßa Business X Repository](#diferen√ßa-business-x-repository)**
- **[Controller](#controller-api)**
- **[Resumo](#resumo-geral)**


## Model (Modelos)
üìÇ Model/Books.cs \
**O que faz?**

- Representa a estrutura da entidade no banco de dados.
- Cont√©m os atributos da entidade.
- Serve como "molde" para os dados que ser√£o manipulados.
- Mapeamento da tabela\
ex:
```
public class Books
{
    public long Id { get; set; }
    public string Title { get; set; }
    public string Author { get; set; }
    public decimal Price { get; set; }
}
```


## Context (Banco de Dados)
üìÇ Model/Context/SqLiteContext.cs\
**O que faz?**

- Representa a conex√£o com o banco de dados.
- Define quais entidades ser√£o tabelas no banco.
- Usa Entity Framework (EF Core) para mapear objetos no banco de dados.\
ex:

```
using Microsoft.EntityFrameworkCore;
using webRestAPI.Model;

public class SqLiteContext : DbContext
{
    public SqLiteContext(DbContextOptions<SqLiteContext> options) : base(options) { }

    public DbSet<Books> Books { get; set; } // Tabela "Books"
}
```


## Repository (Acesso ao Banco de Dados)
üìÇ Repository/IBooksRepository.cs\
üìÇ Repository/Implementation/BooksRepositoryImplementation.cs\
**O que faz?**

- Cont√©m as opera√ß√µes CRUD (Create, Read, Update, Delete) no banco.
- O Repository isola a l√≥gica de acesso aos dados da aplica√ß√£o.
- O Interface (IBooksRepository) define os m√©todos que o reposit√≥rio deve ter.
- O Implementation faz a logica de implementa√ß√£o da a√ß√£o\
ex interface:
```
using System.Collections.Generic;
using webRestAPI.Model;

public interface IBooksRepository
{
    Books Create(Books books);
    Books FindById(long id);
    List<Books> FindAll();
    Books Update(Books books);
    void Delete(long id);
}
```

ex implementa√ß√£o:
```
using System;
using System.Collections.Generic;
using System.Linq;
using webRestAPI.Model;
using webRestAPI.Model.Context;

public class BooksRepositoryImplementation : IBooksRepository
{
    private readonly SqLiteContext _context;

    public BooksRepositoryImplementation(SqLiteContext context)
    {
        _context = context;
    }

    public Books Create(Books books)
    {
        _context.Add(books);
        _context.SaveChanges();
        return books;
    }

    public Books FindById(long id)
    {
        return _context.Books.SingleOrDefault(b => b.Id == id);
    }

    public List<Books> FindAll()
    {
        return _context.Books.ToList();
    }

    public Books Update(Books books)
    {
        var result = _context.Books.SingleOrDefault(b => b.Id == books.Id);
        if (result == null) return null;

        _context.Entry(result).CurrentValues.SetValues(books);
        _context.SaveChanges();
        return books;
    }

    public void Delete(long id)
    {
        var book = _context.Books.SingleOrDefault(b => b.Id == id);
        if (book != null)
        {
            _context.Books.Remove(book);
            _context.SaveChanges();
        }
    }
}
```

**No geral:**

- O reposit√≥rio acessa diretamente o banco e executa as opera√ß√µes.
- Evita duplica√ß√£o de c√≥digo, pois a l√≥gica do banco est√° centralizada.

## Business (Regra de Neg√≥cio)
üìÇ Business/IBooksBusiness.cs\
üìÇ Business/Implementation/BooksBusinessImplementation.cs\
**O que faz?**

- Define a l√≥gica da aplica√ß√£o (regras de neg√≥cio).
- Recebe os dados do reposit√≥rio e aplica valida√ß√µes.
- Separa a parte l√≥gica da parte de acesso ao banco.\
ex interface:
```
using System.Collections.Generic;
using webRestAPI.Model;

public interface IBooksBusiness
{
    Books Create(Books books);
    Books FindById(long id);
    List<Books> FindAll();
    Books Update(Books books);
    void Delete(long id);
}
```

ex implementa√ß√£o:
```
using System.Collections.Generic;
using webRestAPI.Model;
using webRestAPI.Repository;

public class BooksBusinessImplementation : IBooksBusiness
{
    private readonly IBooksRepository _repository;

    public BooksBusinessImplementation(IBooksRepository repository)
    {
        _repository = repository;
    }

    public List<Books> FindAll()
    {
        return _repository.FindAll();
    }

    public Books FindById(long id)
    {
        return _repository.FindById(id);
    }

    public Books Create(Books books)
    {
        return _repository.Create(books);
    }

    public Books Update(Books books)
    {
        return _repository.Update(books);
    }

    public void Delete(long id)
    {
        _repository.Delete(id);
    }
}
```

**No geral:**

- O Business faz a "ponte" entre a API e o banco.
- Aqui poderiam ser adicionadas valida√ß√µes (ex: impedir pre√ßo negativo).

- O Repository s√≥ faz opera√ß√µes no banco (sem pensar nas regras do neg√≥cio).
- O Business cuida da l√≥gica antes de chamar o Repository.
- üí° Se precisar s√≥ buscar, salvar ou deletar algo, usa Repository.
- üí° Se precisar validar, processar ou transformar dados antes de salvar, usa Business.

## Diferen√ßa Business X Repository
### **Exemplo Comparativo**
Vamos supor que voc√™ tem uma API de livros e quer proibir a cria√ß√£o de livros sem t√≠tulo.

**‚ùå Errado:**\
Faz tudo no Repository
```
public Books Create(Books books)
{
    _context.Add(books);   // Insere sem verificar nada
    _context.SaveChanges();
    return books;
}
```
**üî¥ Problema:** Ele pode salvar um livro sem t√≠tulo ou com pre√ßo negativo, o que pode gerar dados errados.

**‚úÖ Certo:** Regra de neg√≥cio no Business, banco no Repository
```
// Business - Aplica regra antes de salvar
public Books Create(Books books)
{
    if (string.IsNullOrEmpty(books.Title)) 
    {
        throw new Exception("O t√≠tulo do livro n√£o pode ser vazio!");
    }
    
    return _repository.Create(books);  // Chama o Repository
}
```
```
// Repository - S√≥ salva os dados no banco
public Books Create(Books books)
{
    _context.Add(books);
    _context.SaveChanges();
    return books;
}
```
**‚úÖ Agora est√° certo!** O Business impede que um livro inv√°lido seja salvo no banco.

**basicamente ai o controller ve a requisi√ß√£o, passa pro business q aplica as regras e se tiverem certas chama o repostiory pra de fato executar no banco a a√ß√£o solicitada!**

REQUISI√á√ÉO -> CONTROLLER -> BUSINESS -> REPOSITORY -> BANCO DE DADOS
                         <-          <-           <-
                   RESPOSTA PARA O CLIENTE



## Controller (API)
üìÇ Controllers/BooksController.cs\
**O que faz?**

- Define as rotas da API (endpoints).
- Recebe requisi√ß√µes HTTP (GET, POST, PUT, DELETE).
- Chama o Business para processar a l√≥gica.

**o geral:**

O Controller √© respons√°vel por expor a API para o usu√°rio.
Recebe requisi√ß√µes HTTP e chama a camada de neg√≥cio.


## Resumo Geral
- **Model:** Define a estrutura dos dados (entidade Books).
- **Context:** Gerencia a conex√£o com o banco de dados.
- **Repository:** Manipula diretamente o banco (CRUD).
- **Business:** Aplica regras de neg√≥cio antes de chamar o repository.
- **Controller:** Exp√µe a API e recebe requisi√ß√µes HTTP.